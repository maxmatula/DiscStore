@model DiscStore.Infrastructure.ViewModels.Product.ProductViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_FluidLayout.cshtml";
}


<h2>Create</h2>
@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data", id = "form" }))

{
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-lg-4 col-lg-offset-4">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Artist, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Artist, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Artist, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PremiereDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PremiereDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.PremiereDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <a class="btn">
                    <input type="file" id="upload" value="Wybierz plik" accept="image/*" />
                </a>
            </div>
            <input type="hidden" id="imagebase64" name="file">
            <div id="croop-image"></div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.selectedCategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.selectedCategoryID, Model.Categories)
            @Html.ValidationMessageFor(model => model.selectedCategoryID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>

}

@section Scripts {
    <script type="text/javascript">
        var $element = $('#croop-image');
        $element.croppie({
            enableExif: false,
            viewport: {
                width: 400,
                height: 300
            },
            boundary: {
                width: 450,
                height: 400
            }
        });

        function readFile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (event) {
                    $element.croppie('bind', {
                        url: event.target.result
                    });
                };

                reader.readAsDataURL(input.files[0]);
            } else {
                alert('Sorry - you\'re browser doesn\'t support the FileReader API');
            }
        }

        $('#upload').on('change', function () { readFile(this); });


        $('#form').on('submit', function (ev) {
            $element.croppie('result', 'canvas').then(function (resp) {
                $('#imagebase64').val(resp);
            });
        });
    </script>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
